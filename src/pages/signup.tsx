import React, { useContext, useEffect } from "react";
import Avatar from "@mui/material/Avatar";
import Button from "@mui/material/Button";
import CssBaseline from "@mui/material/CssBaseline";
import TextField from "@mui/material/TextField";
import FormControlLabel from "@mui/material/FormControlLabel";
import Checkbox from "@mui/material/Checkbox";
import Paper from "@mui/material/Paper";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import LockOutlinedIcon from "@mui/icons-material/LockOutlined";
import Typography from "@mui/material/Typography";
import Alert from "@mui/material/Alert";
import AlertTitle from "@mui/material/AlertTitle";
import { useRouter } from "next/router";
import { useFormik } from "formik";
import * as Yup from "yup";
import Link   from "next/link";

import Copyright from "../components/Layout/Footer";
import authContext from "../context/auth/authContext";
import { AuthContextType } from "../interfaces/AuthContextType";
import Head from "next/head";

export default function Login() {
  // definir el context
  const AuthContext = useContext<AuthContextType>(authContext);
  const { message, auth, signup, errorSession, signupStatus } = AuthContext;

  // next router
  const router = useRouter();

  useEffect(() => {
    if (auth) {
      router.push("/");
    }
  }, [auth]);

  // formulario y validacion con formik y yup
  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
      firstname: ""
    },
    validationSchema: Yup.object({  
      firstname: Yup.string(),
      email: Yup.string()
        .email("No es un email válido")
        .required("El email es obligatorio"),
      // username: Yup.string().required("El usuario es obligatorio"),
      password: Yup.string().required("La contraseña es obligatoria"),
    }),
    onSubmit: (values) => {
      signup(values);
    },
  });

  return (
    <>
      <Head>
        <title>QCODE Cars - Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container component="main" sx={{ height: "100vh" }}>
        <CssBaseline />
        <Grid
          item
          xs={false}
          sm={4}
          md={7}
          sx={{
            backgroundImage: "url('./img/car-bg-2.jpg')",
            backgroundRepeat: "no-repeat",
            backgroundColor: (t) =>
              t.palette.mode === "light"
                ? t.palette.grey[50]
                : t.palette.grey[900],
            backgroundSize: "cover",
            backgroundPosition: "center",
          }}
        />
        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>
          {  signupStatus === 201 &&
                <Box sx={{ width: "30vw" }}>
                <Alert severity="success">
                  <AlertTitle>Registro exitoso</AlertTitle>
                  Tu cuenta fue creadacon éxito, ahora inicia sesión
                </Alert>
              </Box>
          }
          <Box
            sx={{
              my: 8,
              mx: 4,
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            {errorSession && errorSession.statusCode === 401 ? (
              <Alert severity="error">{errorSession.statusCode}</Alert>
            ) : null}
            <Avatar sx={{ m: 1, bgcolor: "primary.main" }}>
              <LockOutlinedIcon />
            </Avatar>
            <Typography component="h1" variant="h5">
              Crear cuenta
            </Typography>
            <Box
              component="form"
              noValidate
              onSubmit={formik.handleSubmit}
              sx={{ mt: 1 }}
            >
              {message ? <Alert severity="error">{message}</Alert> : null}
              <TextField
                margin="normal"
                required
                fullWidth
                id="email"
                label="Nombre"
                name="firstname"
                autoComplete="name"
                autoFocus
                value={formik.values.firstname}
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
              />
              {formik.touched.firstname && formik.errors.firstname ? (
                <Box sx={{ width: "30vw" }}>
                  <Alert severity="error">
                    <AlertTitle>Error</AlertTitle>
                    {formik.errors.firstname}
                  </Alert>
                </Box>
              ) : null}
              <TextField
                margin="normal"
                required
                fullWidth
                id="email"
                label="Email"
                name="email"
                autoComplete="email"
                autoFocus
                value={formik.values.email}
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
              />
              {formik.touched.email && formik.errors.email ? (
                <Box sx={{ width: "30vw" }}>
                  <Alert severity="error">
                    <AlertTitle>Error</AlertTitle>
                    {formik.errors.email}
                  </Alert>
                </Box>
              ) : null}
              <TextField
                margin="normal"
                required
                fullWidth
                name="password"
                label="Password"
                type="password"
                id="password"
                autoComplete="current-password"
                value={formik.values.password}
                onChange={formik.handleChange}
                onBlur={formik.handleBlur}
              />
              {formik.touched.password && formik.errors.password ? (
                <Box sx={{ width: "30vw" }}>
                  <Alert severity="error">
                    <AlertTitle>Error</AlertTitle>
                    {formik.errors.password}
                  </Alert>
                </Box>
              ) : null}
              <FormControlLabel
                control={<Checkbox value="remember" color="primary" />}
                label="Recuerdame"
              />
              <Button
                type="submit"
                fullWidth
                variant="contained"
                sx={{ mt: 3, mb: 2 }}
              >
                Registrate
              </Button>
              <Grid container>
                <Grid item>
                <Link href={"/login"}>
                    <Typography  sx={{cursor:'pointer'}} variant="body2" color="primary">Iniciar Sesión</Typography>
                  </Link>
                </Grid>
              </Grid>
              <Copyright sx={{ mt: 5 }} />
            </Box>
          </Box>
        </Grid>
      </Grid>
    </>
  );
}
